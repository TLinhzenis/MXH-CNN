const express = require('express');
const router = express.Router();
const Post = require('../model/Post');
const Comment = require('../model/Comment');
const User = require('../model/User');
const ListFriend = require('../model/ListFriend');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
const FormData = require('form-data');
const Message = require('../model/Message');

async function updateUserTag(userId) {
    const posts = await Post.find({ userId });
    const comments = await Comment.find({ userId }).populate('postId', 'type');
    const likedPosts = await Post.find({ userReactions: userId }).populate('userId', 'type');
    const messagesWithType = await Message.find({ sender: userId, type: { $ne: null } });

    const typeCount = {};
    
    // Count from user's posts
    posts.forEach(p => {
        if (p.type) typeCount[p.type] = (typeCount[p.type] || 0) + 1;
    });
    
    // Count from user's comments
    comments.forEach(c => {
        if (c.postId && c.postId.type) typeCount[c.postId.type] = (typeCount[c.postId.type] || 0) + 1;
    });

    // Count from user's likes
    likedPosts.forEach(p => {
        if (p.type) typeCount[p.type] = (typeCount[p.type] || 0) + 1;
    });

    // Count from user's sent messages with image type
    messagesWithType.forEach(m => {
        if (m.type && m.type !== 'none' && m.type !== 'null') typeCount[m.type] = (typeCount[m.type] || 0) + 1;
    });

    let maxType = "";
    let maxCount = 0;
    for (const [type, count] of Object.entries(typeCount)) {
        if (count > maxCount) {
            maxType = type;
            maxCount = count;
        }
    }

    await User.findByIdAndUpdate(userId, { tag: maxType });
}
// ‚úÖ C·∫•u h√¨nh multer ƒë·ªÉ l∆∞u ·∫£nh
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, '../public/img'));
  },
  filename: (req, file, cb) => {
    const originalName = file.originalname.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    const cleanName = originalName.replace(/[^a-zA-Z0-9.-]/g, '-');
    const uniqueName = `${Date.now()}-${cleanName}`;
    cb(null, uniqueName);
  }
});
const upload = multer({ storage });

// üì∏ API t·∫°o b√†i vi·∫øt
router.post('/create', upload.single('image'), async (req, res) => {
  try {
    const { userId, status, privacy } = req.body;
    const image = req.file ? req.file.filename : null;

    const newPost = new Post({
      userId,
      status,
      image,
      privacy,
      time: new Date().toLocaleString(),
      type: 'pending' // s·∫Ω ƒë∆∞·ª£c update sau
    });

    await newPost.save();
    res.status(201).json({ message: 'B√†i vi·∫øt ƒëang ƒë∆∞·ª£c t·∫°o!', postId: newPost._id });

    // ‚è≥ G·ªçi ph√¢n lo·∫°i n·∫øu c√≥ ·∫£nh
    if (image) {
      classifyImageAndUpdatePost(newPost._id, image);
    }
    // C·∫≠p nh·∫≠t tag cho user
    updateUserTag(userId);

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'L·ªói t·∫°o b√†i vi·∫øt', details: err.message });
  }
});

// üß† H√†m ph√¢n lo·∫°i ·∫£nh v√† c·∫≠p nh·∫≠t b√†i vi·∫øt
async function classifyImageAndUpdatePost(postId, image) {
  try {
    const imagePath = path.join(__dirname, '../public/img', image);

    // üß± Ki·ªÉm tra file t·ªìn t·∫°i
    if (!fs.existsSync(imagePath)) {
      console.error("‚ùå ·∫¢nh kh√¥ng t·ªìn t·∫°i:", imagePath);
      return;
    }

    // === G·ª≠i ·∫£nh ƒë·∫øn API scene
    const formData1 = new FormData();
    formData1.append('image', fs.createReadStream(imagePath));
    const sceneResponse = await axios.post(
      'https://7641-34-125-91-200.ngrok-free.app/predict-scene',
      formData1,
      { headers: formData1.getHeaders() }
    );

    let predictedType = 'none';
    if (sceneResponse.data?.scene) {
      predictedType = sceneResponse.data.scene;
    }
    console.log(`üîç Scene d·ª± ƒëo√°n: ${predictedType}`);

    // üî™ Ki·ªÉm tra v√† t·ª± ƒë·ªông x√≥a b√†i vi·∫øt c√≥ n·ªôi dung nguy hi·ªÉm
    if (predictedType === 'knife' || predictedType === 'gun') {
      console.log(`üö® Ph√°t hi·ªán n·ªôi dung nguy hi·ªÉm: ${predictedType} - T·ª± ƒë·ªông x√≥a b√†i vi·∫øt ${postId}`);
      
      // X√≥a file ·∫£nh
      try {
        fs.unlinkSync(imagePath);
        console.log(`üóëÔ∏è ƒê√£ x√≥a file ·∫£nh: ${image}`);
      } catch (err) {
        console.error(`‚ùå L·ªói x√≥a file ·∫£nh: ${err.message}`);
      }
      
      // X√≥a b√†i vi·∫øt kh·ªèi database
      await Post.findByIdAndDelete(postId);
      console.log(`‚úÖ ƒê√£ x√≥a b√†i vi·∫øt ${postId} do ch·ª©a n·ªôi dung nguy hi·ªÉm`);
      return;
    }

    // === G·ª≠i l·∫°i ·∫£nh ƒë·∫øn API province
    const formData2 = new FormData();
    formData2.append('image', fs.createReadStream(imagePath));
    const provinceResponse = await axios.post(
      'https://7641-34-125-91-200.ngrok-free.app/predict-province',
      formData2,
      { headers: formData2.getHeaders() }
    );

    let predictedProvince = '';
    if (provinceResponse.data?.province) {
      predictedProvince = provinceResponse.data.province;
    }
    console.log(`üìç T·ªânh d·ª± ƒëo√°n: ${predictedProvince}`);

    // === C·∫≠p nh·∫≠t b√†i vi·∫øt
    await Post.findByIdAndUpdate(postId, {
      type: predictedType,
      location: predictedProvince,
    });

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t b√†i vi·∫øt ${postId}`);

  } catch (err) {
    console.error("‚ùå L·ªói ph√¢n lo·∫°i h√¨nh ·∫£nh:", err.message);
  }
}

// üì• API l·∫•y t·∫•t c·∫£ b√†i vi·∫øt
router.get('/', async (req, res) => {
  try {
    const userId = req.query.userId;
    if (!userId) return res.status(400).json({ error: 'Thi·∫øu userId' });

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: 'User not found' });

    // L·∫•y danh s√°ch b·∫°n b√®
    const friends = await ListFriend.find({
      status: "friend",
      $or: [
        { userId1: userId },
        { userId2: userId }
      ]
    });
    const friendIds = friends.map(f =>
      f.userId1.toString() === userId ? f.userId2.toString() : f.userId1.toString()
    );

    // L·∫•y t·∫•t c·∫£ b√†i vi·∫øt m·ªõi nh·∫•t (lo·∫°i b·ªè n·ªôi dung nguy hi·ªÉm)
    const allPosts = await Post.find({
      type: { $nin: ['knife', 'gun'] } // Lo·∫°i b·ªè b√†i vi·∫øt c√≥ type nguy hi·ªÉm
    })
      .populate('userId', 'fullName avatar role')
      .sort({ createdAt: -1 });

    // 1. preferredPosts: b√†i vi·∫øt c√≥ type gi·ªëng tag user
    const preferredPosts = allPosts.filter(p => p.type === user.tag);
    // 2. otherPosts: c√°c b√†i c√≤n l·∫°i (kh√¥ng tr√πng type ho·∫∑c ƒë√£ l·∫•y ·ªü preferredPosts)
    const preferredIds = new Set(preferredPosts.map(p => p._id.toString()));
    const otherPosts = allPosts.filter(p => !preferredIds.has(p._id.toString()));

    // 3. ∆Øu ti√™n b√†i c·ªßa b·∫°n b√® trong otherPosts l√™n ƒë·∫ßu
    const friendPosts = otherPosts.filter(p => {
      const uid = p.userId._id ? p.userId._id.toString() : p.userId.toString();
      return friendIds.includes(uid);
    });
    const restPosts = otherPosts.filter(p => {
      const uid = p.userId._id ? p.userId._id.toString() : p.userId.toString();
      return !friendIds.includes(uid);
    });
    const normalPosts = [...friendPosts, ...restPosts];

    // 4. Tr·ªôn: m·ªói 3 b√†i th√¨ 2 b√†i preferred, 1 b√†i normal
    let result = [];
    let i = 0, j = 0;
    while (i < preferredPosts.length || j < normalPosts.length) {
      // Th√™m 2 b√†i preferred (n·∫øu c√≤n)
      for (let k = 0; k < 2 && i < preferredPosts.length; k++) {
        result.push(preferredPosts[i++]);
      }
      // Th√™m 1 b√†i normal (n·∫øu c√≤n)
      if (j < normalPosts.length) {
        result.push(normalPosts[j++]);
      }
      // N·∫øu h·∫øt preferredPosts th√¨ ch·ªâ l·∫•y t·ª´ normalPosts
      if (i >= preferredPosts.length && j < normalPosts.length) {
        result.push(normalPosts[j++]);
      }
    }

    res.json({ posts: result });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'L·ªói l·∫•y danh s√°ch b√†i vi·∫øt', details: err.message });
  }
});

// üì• API l·∫•y b√†i vi·∫øt theo ID
router.get('/:id', async (req, res) => {
  try {
    const post = await Post.findById(req.params.id).populate('userId', 'fullName avatar role');
    if (!post) return res.status(404).json({ error: 'B√†i vi·∫øt kh√¥ng t√¨m th·∫•y' });
    res.json({ post });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'L·ªói l·∫•y b√†i vi·∫øt' });
  }
});

// ‚ù§Ô∏è API like/unlike b√†i vi·∫øt
router.post('/:id/reaction', async (req, res) => {
  try {
    const { userId } = req.body;
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ error: 'Post not found' });

    const idx = post.userReactions.findIndex(u => u.toString() === userId);
    let liked;
    if (idx === -1) {
      post.userReactions.push(userId);
      liked = true;
    } else {
      post.userReactions.splice(idx, 1);
      liked = false;
    }
    post.reaction = post.userReactions.length.toString();
    await post.save();

    // Update user tag when they like/unlike
    await updateUserTag(userId);
    
    res.json({ liked, reaction: post.reaction });

  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

// üõë API x√≥a b√†i vi·∫øt
router.delete('/:id', async (req, res) => {
  try {
    const { userId, role } = req.body;
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ error: 'Post not found' });
    if (post.userId.toString() !== userId && role !== 'admin') {
      return res.status(403).json({ error: 'Kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y' });
    }
    await Post.findByIdAndDelete(req.params.id);
    res.json({ message: 'ƒê√£ x√≥a b√†i vi·∫øt' });
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

// ‚úèÔ∏è API s·ª≠a b√†i vi·∫øt
router.put('/:id', async (req, res) => {
  try {
    const { userId, role, status, image, privacy } = req.body;
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ error: 'Post not found' });
    if (post.userId.toString() !== userId && role !== 'admin') {
      return res.status(403).json({ error: 'Kh√¥ng c√≥ quy·ªÅn s·ª≠a b√†i vi·∫øt n√†y' });
    }
    if (status) post.status = status;
    if (image) post.image = image;
    if (privacy) post.privacy = privacy;
    await post.save();
    res.json({ message: 'ƒê√£ c·∫≠p nh·∫≠t b√†i vi·∫øt', post });
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

// üö© API report b√†i vi·∫øt
router.post('/:id/report', async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ error: 'Post not found' });
    post.report = (post.report || 0) + 1;
    if (post.report >= 10) {
      await Post.findByIdAndDelete(req.params.id);
      return res.json({ message: 'B√†i vi·∫øt ƒë√£ b·ªã x√≥a do b·ªã report qu√° nhi·ªÅu' });
    } else {
      await post.save();
      return res.json({ message: 'ƒê√£ report b√†i vi·∫øt', report: post.report });
    }
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = { router, updateUserTag };
